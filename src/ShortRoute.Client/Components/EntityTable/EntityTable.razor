@typeparam TEntity
@typeparam TId
@typeparam TRequest
@typeparam TCreate
@typeparam TUpdate

@inject IJSRuntime JS
@inject IStringLocalizer<SharedResource> L

<style>
    .mud-table-container {
        overflow: auto;
    }
</style>

<ErrorBoundary>
    <ChildContent>

        @if (_canSearch && (Context.AdvancedSearchEnabled || AdvancedSearchContent is not null))
        {
            <MudExpansionPanel @bind-IsExpanded="_advancedSearchExpanded"
                Style="padding:10px!important; margin-bottom:10px!important;border-radius: var(--mud-default-borderradius) !important;"
                Class="mud-elevation-25" Text="@L["Advanced Search"]">
                <MudTextField @bind-Value="SearchString" Immediate="true"
                    Placeholder="@($"{L["Search for"]} {Context.EntityNamePlural}")" Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                    Style="flex:none!important;margin:0px!important" TextChanged="OnSearchStringChanged">
                </MudTextField>
                @if (Context.AdvancedSearchEnabled)
                {
                    <div style="margin-top:10px!important">
                        <MudCheckBox Label="All Columns" T="bool" Checked="Context.AllColumnsChecked"
                            CheckedChanged="Context.AllColumnsCheckChanged"></MudCheckBox>
                        @foreach (var field in Context.Fields)
                        {
                            <MudCheckBox @bind-Checked="@field.CheckedForSearch" Label="@(field.DisplayName)"></MudCheckBox>
                        }
                    </div>
                }
                @AdvancedSearchContent

            </MudExpansionPanel>
        }

        <FshTable @ref="_table" Elevation="25" ServerData="@ServerReloadFunc" Items="@_entityList" Filter="LocalSearch"
            Loading="@Loading" LoadingProgressColor="@Color.Secondary" ChildRowContent="@ChildRowContent">

            <ToolBarContent>
                <div class="justify-center mud-text-align-center">
                    @if (_canCreate)
                    {
                        <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Primary"
                            OnClick="(() => InvokeModal())" StartIcon="@Icons.Material.Filled.Add"
                            IconColor="Color.Surface">@L["Create"]</MudButton>
                    }
                    @if (_canExport)
                    {
                        <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Tertiary"
                            OnClick="(() => ExportAsync())" StartIcon="@Icons.Material.Filled.ImportExport"
                            Class="ms-1" IconColor="Color.Surface">@L["Export"]</MudButton>
                    }
                    <MudButton DisableElevation Variant="Variant.Filled" OnClick="ReloadDataAsync"
                        StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Secondary"
                        Class="ms-1">@L["Reload"]</MudButton>
                </div>
                <MudSpacer />
                @if (_canSearch && !_advancedSearchExpanded)
                {
                    <MudTextField @bind-Value="SearchString" Immediate="true" FullWidth="false"
                        Placeholder="@($"{L["Search for"]} {Context.EntityNamePlural}")" Adornment="Adornment.End"
                        AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3"
                        TextChanged="OnSearchStringChanged">
                    </MudTextField>
                }
            </ToolBarContent>

            <HeaderContent>
                @if (Context.Fields is not null)
                {
                    foreach (var field in Context.Fields)
                    {
                        <MudTh>
                            @if (Context.IsClientContext)
                            {
                                <MudTableSortLabel SortBy="@field.ValueFunc">@field.DisplayName</MudTableSortLabel>
                            }
                            else
                            {
                                <MudTableSortLabel Enabled="Context.ServerContext?.EnableSort ?? false" T="TEntity" SortLabel="@field.SortLabel">@field.DisplayName</MudTableSortLabel>
                            }
                        </MudTh>
                    }
                }
                <MudTh>@L["Actions"]</MudTh>
            </HeaderContent>

            <RowTemplate>
                @foreach (var field in Context.Fields)
                {
                    <MudTd DataLabel="@field.DisplayName">
                        @if (field.Template is not null)
                        {
                            @field.Template(context)
                        }
                        else if (field.Type == typeof(bool))
                        {
                            <MudCheckBox Checked="@field.ValueFunc(context)" ReadOnly Color="Color.Secondary"></MudCheckBox>
                        }
                        else
                        {
                            <MudHighlighter Text="@field.ValueFunc(context)?.ToString()" HighlightedText="@SearchString" />
                        }
                    </MudTd>
                }
                <MudTd DataLabel="Actions">
                    @if (ActionsContent is not null)
                    {
                        @ActionsContent(context)
                    }
                    else if (HasActions)
                    {
                        @*<MudIconButton Icon="@Icons.Material.Outlined.RemoveRedEye" Color="Color.Inherit" Edge="Edge.Start" Link="/" />*@
                        @if (CanUpdateEntity(context))
                        {
                            <MudIconButton Icon="@Icons.Material.Outlined.Edit" Class="me-1" OnClick="() => InvokeModal(context)" />
                        }
                        @if (CanDeleteEntity(context))
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Class="me-1 red-on-hover" OnClick="() => Delete(context)" />
                        }

                        @if (ExtraActions is not null)
                        {
                            <MudMenu Label="@L["Actions"]" Variant="Variant.Filled" DisableElevation="true"
                                EndIcon="@Icons.Filled.KeyboardArrowDown" IconColor="Color.Secondary" Direction="Direction.Left"
                                OffsetX="true">
                                @if (ExtraActions is not null)
                                {
                                    @ExtraActions(context)
                                }
                            </MudMenu>   
                        }
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" DisableElevation="true"
                            StartIcon="@Icons.Material.Filled.DoNotTouch" IconColor="Color.Secondary" Size="Size.Small"
                        Color="Color.Surface">
                            @L["No Allowed Actions"]
                        </MudButton>
                    }
                </MudTd>
            </RowTemplate>

            <PagerContent>
                <TablePager />
            </PagerContent>

        </FshTable>

    </ChildContent>
    <ErrorContent>
        <FshCustomError />
    </ErrorContent>
</ErrorBoundary>